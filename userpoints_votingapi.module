<?php
// $Id$

define('USERPOINTS_VOTINGAPI_VOTE', 'userpoints_votingapi_vote');
define('USERPOINTS_VOTINGAPI_MODERATION', 'userpoints_votingapi_moderation');
define('USERPOINTS_VOTINGAPI_DAILY_THRESHOLD', 'userpoints_votingapi_daily_threshold');
    
/**
 * Implementation of hook_form_alter().
 *
 * Extends User Points module with Voting API settings.
 */
function userpoints_votingapi_form_alter($form_id, &$form) {
  if ($form_id == 'userpoints_admin_settings') {
    // Shift system_settings_form buttons.
    $weight = $form['buttons']['#weight'];
    $form['buttons']['#weight'] = $weight + 1;
    
    $group = "votingapi";
    $form[$group] = array(
      '#type' => 'fieldset',
      '#title' => t('Voting API settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#description' => t(''),
    );
    
    $form[$group][USERPOINTS_VOTINGAPI_MODERATION] = array(
      '#type' => 'checkbox',
      '#title' => t('Moderate votes'),
      '#default_value' => variable_get(USERPOINTS_VOTINGAPI_MODERATION, 0),
      '#description' => t('Moderate User Points earned from votes.'),
    );
    
    $form[$group][USERPOINTS_VOTINGAPI_VOTE] = array(
        '#type'          => 'textfield',
      '#title' => t('!Points for voting', userpoints_translation()),
        '#default_value' => variable_get(USERPOINTS_VOTINGAPI_VOTE, 1),
        '#size'          => 5,
        '#maxlength'     => 5,
    );
    
    $form[$group][USERPOINTS_VOTINGAPI_DAILY_THRESHOLD] = array(
      '#type' => 'select',
      '#title' => t('Daily threshold'),
      '#options' => drupal_map_assoc(array(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50)),
      '#default_value' => variable_get(USERPOINTS_VOTINGAPI_DAILY_THRESHOLD, 0),
      '#description' => t('The maximum number of votes -- that will earn User Points -- in a 24-hour period.<br />Select 0 to ignore.'),
    );
  }
}

/**
 * Implementation of hook_votingapi_insert().
 *
 */
function userpoints_votingapi_votingapi_insert($vote) {
  $threshold = variable_get(USERPOINTS_VOTINGAPI_DAILY_THRESHOLD, 0);
  if (($threshold == '0') OR (userpoints_votingapi_within_threshold($vote->uid, $threshold))) {
  userpoints_userpointsapi(array(
    'uid'       => $vote->uid,
    'points'    => variable_get(USERPOINTS_VOTINGAPI_VOTE, 1),
    'moderate' => variable_get(USERPOINTS_VOTINGAPI_MODERATION, 0),
    'event'     => $vote->tag,
    'entity_id' => $vote->content_id,
    'entity_type' => $vote->content_type,
    'operation'     => t('insert'),
    'description' => 'Vote cast: '. $vote->content_type .' '. $vote->content_id .'.',
    )
  );
 }
}

/**
 * Implementation of hook_votingapi_delete().
 *
 */
function userpoints_votingapi_votingapi_delete($vote) {
  $threshold = variable_get(USERPOINTS_VOTINGAPI_DAILY_THRESHOLD, 0);
  if (($threshold == '0') OR (userpoints_votingapi_within_threshold($vote->uid, $threshold))) {
  userpoints_userpointsapi(array(
    'uid'       => $vote->uid,
    'points'    => -1 * variable_get(USERPOINTS_VOTINGAPI_VOTE, 1),
    'moderate' => variable_get(USERPOINTS_VOTINGAPI_MODERATION, 0),
    'event'     => $vote->tag,
    'entity_id' => $vote->content_id,
    'entity_type' => $vote->content_type,
    'operation'     => t('insert'),
    'description' => 'Vote cancelled: '. $vote->content_type .' '. $vote->content_id .'.',
    )
  );
 }
}

function userpoints_votingapi_within_threshold($uid, $threshold) {
  $number = db_num_rows(db_query("SELECT uid FROM {votingapi_vote} WHERE uid = %d AND timestamp > %d", $uid, time() - 86400));
  return ($number <= $threshold ? TRUE : FALSE);
}